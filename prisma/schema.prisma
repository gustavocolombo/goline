// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Users {
  id         String     @unique @default(uuid())
  name       String
  email      String     @unique
  password   String
  height     Float
  weight     Float
  cellphone  String
  status     StatusUser @default(ACTIVE)
  roles      RolesUser  @default(USER)
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())

  address     Address[]
  dressmaking Dressmaking[]
  usersToken  UsersToken[]
  order       Order[]
  post        Post[]

  @@map("users")
}

model Dressmaker {
  id            String      @id @default(uuid())
  name          String
  email         String      @unique
  password      String
  expertise     String[]
  cellphone     String
  status        StatusUser? @default(ACTIVE)
  roles         RolesUser?  @default(DRESSMAKER)
  image_profile String?
  created_at    DateTime    @default(now())
  updated_at    DateTime    @default(now())
  followers     Int         @default(0)

  dressmaking Dressmaking[]
  address     Address[]
  post        Post[]

  @@map("dressmaker")
}

model Dressmaking {
  id           String           @id @default(uuid())
  name_service String
  price        Float
  grabbed      Boolean          @default(false)
  tag          TagsDressmaking? @default(DRESSMAKING)
  description  String
  start_date   DateTime
  end_date     DateTime

  dressmaker    Dressmaker? @relation(fields: [dressmaker_id], references: [id])
  dressmaker_id String?

  user    Users?  @relation(fields: [user_id], references: [id])
  user_id String?

  order Order[]
  post  Post?

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("dressmaking")
}

model Address {
  id              String         @id @default(uuid())
  city            String
  neighborhoud    String
  number          Int
  street          String
  lat             Float
  lng             Float
  zip_code        String
  status          StatusAddress? @default(DEFAULT)
  current_address Boolean        @default(true)

  users         Users?      @relation(fields: [users_id], references: [id])
  users_id      String?
  dressmaker    Dressmaker? @relation(fields: [dressmaker_id], references: [id])
  dressmaker_id String?

  @@map("address")
}

model UsersToken {
  id         String    @id @default(uuid())
  token      String    @default(uuid())
  used       Boolean   @default(false)
  used_in    DateTime?
  expires_in DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  users_id String
  user     Users  @relation(fields: [users_id], references: [id])

  @@map("userstoken")
}

model Order {
  id              String           @id @default(uuid())
  final_price     Float
  tag             TagsDressmaking? @default(DRESSMAKING)
  user            Users            @relation(fields: [user_id], references: [id])
  dressmaking     Dressmaking      @relation(fields: [dressmaking_id], references: [id])
  status          StatusOrder?     @default(AWAITING_PAYMENT)
  delivery_date   DateTime?
  delivery_option DeliveryOption
  tax_delivery    Float

  created_at     DateTime @default(now())
  updated_at     DateTime @default(now())
  user_id        String
  dressmaking_id String

  @@map("order")
}

model Post {
  id String @id @default(uuid())

  dressmaking_id String      @unique
  dressmaking    Dressmaking @relation(fields: [dressmaking_id], references: [id])

  dressmaker_id String
  dressmaker    Dressmaker @relation(fields: [dressmaker_id], references: [id])

  users_id    String?
  favorite_by Users?  @relation(fields: [users_id], references: [id])

  title String
  image String?
  stars Int     @default(0)

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("posts")
}

enum StatusUser {
  ACTIVE
  INACTIVE
  DELETED
}

enum RolesUser {
  USER
  DRESSMAKER
}

enum TagsDressmaking {
  DRESSMAKING
  NEEDLEWORK
  ADJUSTMENT
  REPAIR
  OTHERS
}

enum StatusOrder {
  CANCELED
  DELIVERED
  IN_COURSE
  PAYED
  AWAITING_PAYMENT
}

enum DeliveryOption {
  PAC
  SEDEX
}

enum StatusAddress {
  ACTIVE
  INACTIVE
  DEFAULT
  DELETED
}
