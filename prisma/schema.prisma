// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Users {
  id         String     @unique @default(uuid())
  name       String
  email      String     @unique
  password   String
  height     Float
  weight     Float
  cellphone  String
  status     StatusUser @default(ACTIVE)
  roles      RolesUser  @default(USER)
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())

  address     Address[]
  dressmaking Dressmaking[]
  UsersToken  UsersToken[]

  @@map("users")
}

model Dressmaker {
  id            String      @id @default(uuid())
  name          String
  email         String      @unique
  password      String
  expertise     String[]
  cellphone     String
  status        StatusUser? @default(ACTIVE)
  roles         RolesUser?  @default(DRESSMAKER)
  image_profile String?
  created_at    DateTime    @default(now())
  updated_at    DateTime    @default(now())

  dressmaking Dressmaking[]
  address     Address[]

  @@map("dressmaker")
}

model Dressmaking {
  id           String           @id @default(uuid())
  name_service String
  price        Float
  grabbed      Boolean          @default(false)
  tag          TagsDressmaking? @default(DRESSMAKING)
  description  String
  start_date   DateTime
  end_date     DateTime

  dressmaker    Dressmaker? @relation(fields: [dressmaker_id], references: [id])
  dressmaker_id String?

  user    Users?  @relation(fields: [user_id], references: [id])
  user_id String?

  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())

  @@map("dressmaking")
}

model Address {
  id           String @id @default(uuid())
  city         String
  neighborhoud String
  number       Int
  street       String
  lat          Float
  lng          Float

  users         Users?      @relation(fields: [users_id], references: [id])
  users_id      String?
  dressmaker    Dressmaker? @relation(fields: [dressmaker_id], references: [id])
  dressmaker_id String?

  @@map("address")
}

model UsersToken {
  id         String   @id @default(uuid())
  token      String   @default(uuid())
  used       Boolean  @default(false)
  used_in    DateTime? 
  expires_in DateTime?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  users_id String
  user    Users  @relation(fields: [users_id], references: [id])

  @@map("userstoken")
}

enum StatusUser {
  ACTIVE
  INACTIVE
  DELETED
}

enum RolesUser {
  USER
  DRESSMAKER
}

enum TagsDressmaking {
  DRESSMAKING
  NEEDLEWORK
  ADJUSTMENT
  REPAIR
  OTHERS
}
